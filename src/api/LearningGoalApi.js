/**
 * Cokomo Public Api
 * ## ðŸ‘‰ [Please see the CoKoMo documentation for more information.](https://cokomo-it.de/docs/start/api/documentation/)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import LearningGoal from '../model/LearningGoal';

/**
* LearningGoal service.
* @module api/LearningGoalApi
* @version 1.0.0
*/
export default class LearningGoalApi {

    /**
    * Constructs a new LearningGoalApi. 
    * @alias module:api/LearningGoalApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the learningGoalIdDetailsGet operation.
     * @callback module:api/LearningGoalApi~learningGoalIdDetailsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LearningGoal} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/LearningGoalApi~learningGoalIdDetailsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LearningGoal}
     */
    learningGoalIdDetailsGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling learningGoalIdDetailsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = LearningGoal;
      return this.apiClient.callApi(
        '/LearningGoal/{id}/details', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the learningGoalIdGet operation.
     * @callback module:api/LearningGoalApi~learningGoalIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LearningGoal} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/LearningGoalApi~learningGoalIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LearningGoal}
     */
    learningGoalIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling learningGoalIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = LearningGoal;
      return this.apiClient.callApi(
        '/LearningGoal/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
