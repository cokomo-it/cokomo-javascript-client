/**
 * Cokomo Public Api
 * ## ðŸ‘‰ [Please see the CoKoMo documentation for more information.](https://cokomo-it.de/docs/start/api/documentation/)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CompetenceBaseType from './CompetenceBaseType';
import EdgeType from './EdgeType';

/**
 * The Metamodel model module.
 * @module model/Metamodel
 * @version 1.0.0
 */
class Metamodel {
    /**
     * Constructs a new <code>Metamodel</code>.
     * @alias module:model/Metamodel
     */
    constructor() { 
        
        Metamodel.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Metamodel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Metamodel} obj Optional instance to populate.
     * @return {module:model/Metamodel} The populated <code>Metamodel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Metamodel();

            if (data.hasOwnProperty('competenceBaseTypes')) {
                obj['competenceBaseTypes'] = ApiClient.convertToType(data['competenceBaseTypes'], [CompetenceBaseType]);
            }
            if (data.hasOwnProperty('edgeTypes')) {
                obj['edgeTypes'] = ApiClient.convertToType(data['edgeTypes'], [EdgeType]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Metamodel</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Metamodel</code>.
     */
    static validateJSON(data) {
        if (data['competenceBaseTypes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['competenceBaseTypes'])) {
                throw new Error("Expected the field `competenceBaseTypes` to be an array in the JSON data but got " + data['competenceBaseTypes']);
            }
            // validate the optional field `competenceBaseTypes` (array)
            for (const item of data['competenceBaseTypes']) {
                CompetenceBaseType.validateJSON(item);
            };
        }
        if (data['edgeTypes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['edgeTypes'])) {
                throw new Error("Expected the field `edgeTypes` to be an array in the JSON data but got " + data['edgeTypes']);
            }
            // validate the optional field `edgeTypes` (array)
            for (const item of data['edgeTypes']) {
                EdgeType.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/CompetenceBaseType>} competenceBaseTypes
 */
Metamodel.prototype['competenceBaseTypes'] = undefined;

/**
 * @member {Array.<module:model/EdgeType>} edgeTypes
 */
Metamodel.prototype['edgeTypes'] = undefined;






export default Metamodel;

